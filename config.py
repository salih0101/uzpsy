TOKEN = "6655022114:AAFF6pHlIgSI49h0Z-ovgoOXqym_A4n8y_U"
# PAYMENTS_TOKEN = "381764678:TEST:58218"
# PAYMENTS_TOKEN = "398062629:TEST:999999999_F91D8F69C042267444B74CC0B3C747757EB0E065"
CHANNEL_ID = '@psychofemme'

# if call.data == 'day_two':
#     await bot.send_message(call.from_user.id, '–û–∂–∏–¥–∞–π 24 —á–∞—Å–∞')
#     await asyncio.sleep(5)
#     # await asyncio.sleep(1440)
#
#     await bot.send_message(call.from_user.id, day_two)
#     await bot.send_message(call.from_user.id, '–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞—É–¥–∏–æ, –ñ–º–∏ –∫–Ω–æ–ø–∫—É', reply_markup=inline_buttons.send_audio())
#
# elif call.data == 'send_audio':
#
#     audio_path = 'List_of_courses/1.ogg'
#     audio_path1 = 'List_of_courses/2.ogg'
#
#     if os.path.exists(audio_path) and os.path.exists(audio_path1):
#
#         with open(audio_path, 'rb') as audio_file:
#
#             await bot.send_audio(call.from_user.id, audio_file, caption='–û–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è')
#             await asyncio.sleep(0.5)
#
#         with open(audio_path1, 'rb') as audio_file1:
#
#             await bot.send_audio(call.from_user.id, audio_file1, '–ó–∞–¥–∞–Ω–∏–µ')
#
#     await bot.send_message(call.from_user.id, '–¢–µ—Å—Ç–æ–≤—ã–π', reply_markup=inline_buttons.send_audio())


# --------------------------------------


# @dp.message_handler(content_types=["text"])
# async def main_menu(message):
#     user_answer = message.text
#     user_id = message.from_user.id
#
#     # –ü–æ–ª—É—á–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     if message.text == "–í—Ö–æ–¥ –≤ –±–æ—Ç":
#
#         start = datetime.now()
#         end = start + timedelta(days=7)
#         dpp = end.strftime("%d/%m/%y, %H:%M:%S")
#         database.set_trial_sub(user_id, start, end)
#
#         await message.answer(f"–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å \n–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: \n\n{dpp}",
#                              reply_markup=btns.main_menu_kb(), parse_mode="HTML")
#         return
#
#     deadline = database.deadline(user_id)
#     check_sub = database.check_sub(user_id)
#     photo_path = 'List_of_courses/course_photo.jpg'
#
#     if datetime.strptime(deadline, "%Y-%m-%d %H:%M:%S.%f") >= datetime.now():
#         try:
#             match message.text:
#
#                 case "üìù–û–§–û–†–ú–ò–¢–¨ –ü–û–î–ü–ò–°–ö–£":
#                     await message.answer("–ü—Ä–æ—Ü–µ—Å—Å '–û—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏'",
#                                          reply_markup=course.sub_inline())
#
#                 case "üìö–ö–£–†–°–´":
#                     await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ–≥–æ –∏–∑ –∫—É—Ä—Å–æ–≤",
#                                          reply_markup=course.list_courses())
#
#                 case "‚öôÔ∏è–ù–ê–°–¢–†–û–ô–ö–ê":
#                     await message.answer("–í—ã –≤ —Ä–∞–∑–¥–µ–ª–µ '‚öôÔ∏è–ù–ê–°–¢–†–û–ô–ö–ê'",
#                                          reply_markup=btns.settings_kb())
#
#                 case "üë§–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨":
#                     await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É",
#                                          reply_markup=btns.change_data_kb())
#                     await states.Settings.set_setting.set()
#
#                 case '–ö—É—Ä—Å "–ù–æ–≤–∞—è –Ø"':
#                     await bot.send_photo(photo=open(photo_path, 'rb'), chat_id=user_id, caption=course_info, reply_markup=course.some_kb())
#                     # time.sleep(5)
#                     # await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫')
#
#                 case "‚úÖ–ü–†–û–í–ï–†–ò–¢–¨ –ü–û–î–ü–ò–°–ö–£":
#                     if user_answer == "‚úÖ–ü–†–û–í–ï–†–ò–¢–¨ –ü–û–î–ü–ò–°–ö–£":
#                         if check_sub:
#
#                             check = "–ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:\n\n"
#                             date_format = datetime.fromisoformat(check_sub)
#                             date_to_user = date_format.strftime("%d/%m/%Y")
#
#                             check += f"–î–∞—Ç–∞ {date_to_user}\n"
#                             check += "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É"
#
#                             await message.answer(check,
#                                                  reply_markup=btns.ReplyKeyboardMarkup())
#                         else:
#                             await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.")
#
#                 case "–ù–ê–ó–ê–î":
#                     await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ",
#                                          reply_markup=btns.main_menu_kb())
#                     await dp.current_state(user=user_id).finish()
#
#                 case "–ù–∞–∑a–¥":
#                     await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ",
#                                          reply_markup=btns.main_menu_kb())
#                     await dp.current_state(user=user_id).finish()
#
#                 case "–ù–∞–∑–∞–¥–≤":
#                     await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ",
#                                          reply_markup=btns.main_menu_kb())
#                     await dp.current_state(user=user_id).finish()
#
#                 case "–ù–∞–∑–∞–¥":
#                     await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ",
#                                          reply_markup=btns.main_menu_kb())
#                     await dp.current_state(user=user_id).finish()
#
#
#         except Exception as e:
#             print(e)
#             await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥")
#
#
#     else:
#         await message.answer("–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –æ–∫–æ–Ω—á–µ–Ω. –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É",
#                              reply_markup=btns.course_order_kb())
#         await states.Subscription.check_subscription.set()


# case "‚úÖ–ü–†–û–í–ï–†–ò–¢–¨ –ü–û–î–ü–ò–°–ö–£":
#     if user_answer == "‚úÖ–ü–†–û–í–ï–†–ò–¢–¨ –ü–û–î–ü–ò–°–ö–£":
#         if check_sub:
#
#             check = "–ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:\n\n"
#             date_format = datetime.fromisoformat(check_sub)
#             date_to_user = date_format.strftime("%d/%m/%Y")
#
#             check += f"–î–∞—Ç–∞ {date_to_user}\n"
#             check += "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É"
#
#             await message.answer(check,
#                                  reply_markup=btns.ReplyKeyboardMarkup())
#         else:
#             await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.")
