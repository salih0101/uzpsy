
# @dp.callback_query_handler(text='paysub')
# async def buy(call: types.CallbackQuery):
#     await bot.delete_message(call.from_user.id, call.message.message_id)
#     PRICE = types.LabeledPrice(label="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü", amount=500 * 100)
#     if config.PAYMENTS_TOKEN.split(':')[1] == 'TEST':
#
#         await bot.send_invoice(chat_id=call.from_user.id,
#                                title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞",
#                                description="–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –±–æ—Ç–∞ –Ω–∞ 1 –º–µ—Å—è—Ü",
#                                provider_token=config.PAYMENTS_TOKEN,
#                                currency="rub",
#                                photo_url="https://www.aroged.com/wp-content/uploads/2022/06/Telegram-has-a-premium-subscription.jpg",
#                                photo_width=416,
#                                photo_height=234,
#                                photo_size=416,
#                                is_flexible=False,
#                                prices=[PRICE],
#                                start_parameter="one-month-subscription",
#                                payload="test-invoice-payload")
#
#
# @dp.pre_checkout_query_handler(lambda query: True)
# async def pre_checkout(pre_checkout_query: types.PreCheckoutQuery):
#     await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)
#
#
# @dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
# async def successful_payment(message):
#
#     amount_sub = message.successful_payment.total_amount
#     user_id = message.from_user.id
#
#     print(amount_sub)
#     if message.successful_payment.invoice_payload == 'test-invoice-payload':
#         await bot.send_message(message.chat.id,
#                                f"–ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {message.successful_payment.total_amount // 100} {message.successful_payment.currency} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!!!", reply_markup=btns.check_pay_kb())


# @dp.callback_query_handler(lambda call: call.data in ["info", 'start'])
# async def some(call: types.CallbackQuery):
#     user_id = call.from_user.id
#     status =
#     update_status = database.update_status(user_id, status)
#
#     if call.data == 'info':
#
#         await bot.send_message(call.from_user.id, '–ß—Ç–æ-—Ç–æ')
#
#     elif call.data == 'start':
#
#         await bot.send_message(call.from_user.id, '–Å—â–µ —á—Ç–æ-—Ç–æ')


# @dp.callback_query_handler(lambda call: call.data in ['info', 'start', 'next, exit'])


# @dp.message_handler(state=UserRegistration.getting_phone_number, content_types=["contact"])
# async def get_number(message, state=UserRegistration.getting_phone_number):
#     user_answer = message.contact.phone_number
#
#     await state.update_data(number=user_answer)
#     await message.answer("–ù–æ–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω–∏–ª! –í—ã –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª.",
#                          reply_markup=btns.main_menu_kb())
#
#
#     all_info = await state.get_data()
#     user_id = message.from_user.id
#     name = all_info.get("name")
#     phone_number = all_info.get("number")
#     times = all_info.get("time_sub")
#     end_subb = all_info.get("end_sub")
#     gender = user_answer
#     user_status = all_info.get("status")
#     price = all_info.get("amount_sub")
#     database.add_user(user_id, name, phone_number, times, end_subb, gender, user_status, price)
#
#     await state.finish()



# @dp.message_handler(state=Subscription.check_subscription)
# async def user_sub(message, state=Subscription.check_subscription):
#     user_answer = message.text
#
#     if user_answer == "üìùObuna bo'lish":
#         await message.answer("–ü—Ä–æ—Ü–µ—Å—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏",
#                              reply_markup=course.sub_inline())
#         await state.finish()


# @dp.callback_query_handler(text="paysub")
# async def buy(call: types.CallbackQuery):
#     await bot.delete_message(call.from_user.id, call.message.message_id)
#     price = types.LabeledPrice(label="premium", amount=2000000)
#
#     if config.PAYMENTS_TOKEN.split(":")[1] == "TEST":
#         await bot.send_invoice(
#             chat_id=call.from_user.id,
#             title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞",
#             description="–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –±–æ—Ç–∞ –Ω–∞ 1 –º–µ—Å—è—Ü",
#             photo_url="https://www.aroged.com/wp-content/uploads/2022/06/Telegram-has-a-premium-subscription.jpg",
#             payload="test-invoice-payload",
#             provider_token=config.PAYMENTS_TOKEN,
#             currency="UZS",
#             prices=[price])
#
#
# @dp.pre_checkout_query_handler(lambda query: True)
# async def pre_checkout(pre_checkout_query: types.PreCheckoutQuery):
#     await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)
#
#
# @dp.message_handler(content_types=types.ContentType.SUCCESSFUL_PAYMENT)
# async def successful_payment(message: types.Message):
#     amount_sub = message.successful_payment.total_amount
#     user_id = message.from_user.id
#
#     print(amount_sub)
#     if message.successful_payment.invoice_payload == "test-invoice-payload":
#         await bot.send_message(
#             message.chat.id,
#             f"–ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {message.successful_payment.total_amount // 100}"
#             f" {message.successful_payment.currency} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!!!",
#             reply_markup=btns.main_menu_kb())
#
#         database.set_sub_end(user_id)
#         database.add_payment_amount(amount_sub, user_id, True)

# elif user_answer == "‚úÖ–ü–†–û–í–ï–†–ò–¢–¨ –ü–û–î–ü–ò–°–ö–£":
#     if user_answer == "‚úÖ–ü–†–û–í–ï–†–ò–¢–¨ –ü–û–î–ü–ò–°–ö–£":
#         if check_sub:
#
#             check = "–ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:\n\n"
#             date_format = datetime.fromisoformat(check_sub)
#             date_to_user = date_format.strftime("%d/%m/%Y")
#
#             check += f"–î–∞—Ç–∞ {date_to_user}\n"
#             check += "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É"
#
#             await message.answer(check,
#                                  reply_markup=btns.ReplyKeyboardMarkup())
#         else:
#             await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.")

