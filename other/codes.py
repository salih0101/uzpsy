# import time
# import types
# import config
# from settings import *
# from List_of_courses.list_course import *
#
# bot = Bot(config.TOKEN)
# dp = Dispatcher(bot, storage=MemoryStorage())
# logging.basicConfig(level=logging.INFO)
#
#
# @dp.message_handler(Command("start"))
# async def start_message(message):
#     user_id = message.from_user.id
#     checker = database.check_user(user_id)
#
#     if checker:
#
#         check_pay = database.check_pay(user_id)
#
#         if check_pay:
#             await message.answer("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å",
#                                  reply_markup=btns.check_pay_kb())
#
#         else:
#             await message.answer("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç!!!\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª",
#                                  reply_markup=btns.trial_time_kb())
#     else:
#         await message.answer(
#             "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º—è!",
#             reply_markup=btns.ReplyKeyboardMarkup())
#         await UserRegistration.getting_name_state.set()
#
#
# @dp.message_handler(state=UserRegistration.getting_name_state)
# async def get_name(message, state=UserRegistration.getting_name_state):
#     user_answer = message.text
#
#     await state.update_data(name=user_answer)
#     await message.answer("–ò–º—è —Å–æ—Ö—Ä–∞–Ω–∏–ª!\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞!",
#                          reply_markup=btns.phone_number_kb())
#
#     await UserRegistration.getting_phone_number.set()
#
#
# @dp.message_handler(state=UserRegistration.getting_phone_number, content_types=["contact"])
# async def get_number(message, state=UserRegistration.getting_phone_number):
#     user_answer = message.contact.phone_number
#
#     await state.update_data(number=user_answer)
#     await message.answer("–ù–æ–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω–∏–ª! –í—ã –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª.",
#                          reply_markup=btns.trial_time_kb())
#
#
#     all_info = await state.get_data()
#     user_id = message.from_user.id
#     name = all_info.get("name")
#     phone_number = all_info.get("number")
#     time = all_info.get("time_sub")
#     end_subb = all_info.get("end_sub")
#     gender = user_answer
#     user_status = all_info.get("status")
#     price = all_info.get("amount_sub")
#     database.add_user(user_id, name, phone_number, time, end_subb, gender, user_status, price)
#
#     await state.finish()
#
#
# @dp.message_handler(state=Settings.set_name)
# async def change_name_db(message, state=Settings.set_name):
#     user_answer = message.text
#
#     await state.update_data(name=user_answer)
#
#     ch_name = await state.get_data()
#     user_id = message.from_user.id
#     database.change_name(user_id, ch_name)
#     await state.finish()
#     await message.answer("–ò–º—è –£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ",
#                          reply_markup=btns.settings_kb())
#
#
# @dp.message_handler(state=Settings.set_number)
# async def change_number_db(message, state=Settings.set_number):
#     user_answer = message.text
#
#     await state.update_data(phone_number=user_answer)
#
#     ch_number = await state.get_data()
#     user_id = message.from_user.id
#     database.change_number(user_id, ch_number)
#     await state.finish()
#     await message.answer("–ù–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω",
#                          reply_markup=btns.settings_kb())
#
#
# @dp.message_handler(state=Settings.set_setting, content_types=["text"])
# async def set_name(message):
#     user_answer = message.text
#     user_id = message.from_user.id
#     try:
#         match user_answer:
#             case "–ò–∑–º–µ–Ω–∏—Ç –∏–º—è":
#                 await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º—è!")
#                 await Settings.set_name.set()
#
#             case "–ò–∑–º–µ–Ω–∏—Ç –Ω–æ–º–µ—Ä":
#                 await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
#                 await Settings.set_number.set()
#
#     except Exception as e:
#         print(e)
#         await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥")
#
#     try:
#         match user_answer:
#             case "–ù–∞–∑–∞–¥–≤":
#                 await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ —Ä–∞–∑–¥–µ–ª –ù–ê–°–¢–†–û–ô–ö–ò",
#                                      reply_markup=btns.settings_kb())
#                 await dp.current_state(user=user_id).finish()
#
#     except Exception as e:
#         print(e)
#         await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥")
#
#
# @dp.message_handler(content_types=["text"])
# async def main_menu(message):
#     user_answer = message.text
#     user_id = message.from_user.id
#
#     # –ü–æ–ª—É—á–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     if message.text == "–í—Ö–æ–¥ –≤ –±–æ—Ç":
#
#         start = datetime.now()
#         end = start + timedelta(days=7)
#         dpp = end.strftime("%d/%m/%y, %H:%M:%S")
#         database.set_trial_sub(user_id, start, end)
#
#         await message.answer(f"–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥>> \n–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: \n\n{dpp}",
#                              reply_markup=btns.main_menu_kb(), parse_mode="HTML")
#         return
#
#     deadline = database.deadline(user_id)
#     check_sub = database.check_sub(user_id)
#     photo_path = 'List_of_courses/course_photo.jpg'
#
#     if datetime.strptime(deadline, "%Y-%m-%d %H:%M:%S.%f") >= datetime.now():
#         try:
#             match message.text:
#
#                 case "üìù–û–§–û–†–ú–ò–¢–¨ –ü–û–î–ü–ò–°–ö–£":
#                     await message.answer("–ü—Ä–æ—Ü–µ—Å—Å '–û—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏'",
#                                          reply_markup=course.sub_inline())
#
#                 case "üìö–ö–£–†–°–´":
#                     # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏
#                     await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ–≥–æ –∏–∑ –∫—É—Ä—Å–æ–≤",
#                                          reply_markup=course.list_courses())
#
#                 case "‚öôÔ∏è–ù–ê–°–¢–†–û–ô–ö–ê":
#                     await message.answer("–í—ã –≤ —Ä–∞–∑–¥–µ–ª–µ '‚öôÔ∏è–ù–ê–°–¢–†–û–ô–ö–ê'",
#                                          reply_markup=btns.settings_kb())
#
#                 case "üë§–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨":
#                     await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É",
#                                          reply_markup=btns.change_data_kb())
#                     await states.Settings.set_setting.set()
#
#                 case "–ú–ê–†–ê–§–û–ù –ñ–ï–õ–ê–ù–ò–ô":
#                     await bot.send_photo(photo=open(photo_path, 'rb'), chat_id=user_id, caption=course_info)
#                     time.sleep(5)
#                     await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫', reply_markup=course.some_kb())
#
#                 case "‚úÖ–ü–†–û–í–ï–†–ò–¢–¨ –ü–û–î–ü–ò–°–ö–£":
#                     if user_answer == "‚úÖ–ü–†–û–í–ï–†–ò–¢–¨ –ü–û–î–ü–ò–°–ö–£":
#                         if check_sub:
#
#                             check = "–ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:\n\n"
#                             date_format = datetime.fromisoformat(check_sub)
#                             date_to_user = date_format.strftime("%d/%m/%Y")
#
#                             check += f"–î–∞—Ç–∞ {date_to_user}\n"
#                             check += "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É"
#
#                             await message.answer(check,
#                                                  reply_markup=btns.ReplyKeyboardMarkup())
#                         else:
#                             await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.")
#
#                 case "–ù–ê–ó–ê–î":
#                     await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ",
#                                          reply_markup=btns.main_menu_kb())
#                     await dp.current_state(user=user_id).finish()
#
#                 case "–ù–∞–∑a–¥":
#                     await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ",
#                                          reply_markup=btns.main_menu_kb())
#                     await dp.current_state(user=user_id).finish()
#
#                 case "–ù–∞–∑–∞–¥–≤":
#                     await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ",
#                                          reply_markup=btns.main_menu_kb())
#                     await dp.current_state(user=user_id).finish()
#
#                 case "–ù–∞–∑–∞–¥":
#                     await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ",
#                                          reply_markup=btns.main_menu_kb())
#                     await dp.current_state(user=user_id).finish()
#
#
#         except Exception as e:
#             print(e)
#             await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥")
#
#
#     else:
#         await message.answer("–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –æ–∫–æ–Ω—á–µ–Ω. –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É",
#                              reply_markup=btns.course_order_kb())
#         await states.Subscription.check_subscription.set()
#
#
# @dp.message_handler(state=Subscription.check_subscription)
# async def user_sub(message, state=Subscription.check_subscription):
#     user_answer = message.text
#
#     if user_answer == "üìù–û–§–û–†–ú–ò–¢–¨ –ü–û–î–ü–ò–°–ö–£":
#         await message.answer("–ü—Ä–æ—Ü–µ—Å—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏",
#                              reply_markup=course.sub_inline())
#         await state.finish()
#
#
# @dp.callback_query_handler(text="paysub")
# async def buy(call: types.CallbackQuery):
#     await bot.delete_message(call.from_user.id, call.message.message_id)
#     PRICE = types.LabeledPrice(label="premium", amount=2000000)
#
#     if config.PAYMENTS_TOKEN.split(":")[1] == "TEST":
#         await bot.send_invoice(
#             chat_id=call.from_user.id,
#             title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞",
#             description="–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –±–æ—Ç–∞ –Ω–∞ 1 –º–µ—Å—è—Ü",
#             photo_url="https://www.aroged.com/wp-content/uploads/2022/06/Telegram-has-a-premium-subscription.jpg",
#             payload="test-invoice-payload",
#             provider_token=config.PAYMENTS_TOKEN,
#             currency="UZS",
#             prices=[PRICE])
#
#
# @dp.pre_checkout_query_handler(lambda query: True)
# async def pre_checkout(pre_checkout_query: types.PreCheckoutQuery):
#     await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)
#
#
# @dp.message_handler(content_types=types.ContentType.SUCCESSFUL_PAYMENT)
# async def successful_payment(message: types.Message):
#     amount_sub = message.successful_payment.total_amount
#     user_id = message.from_user.id
#
#     print(amount_sub)
#     if message.successful_payment.invoice_payload == "test-invoice-payload":
#         await bot.send_message(
#             message.chat.id,
#             f"–ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {message.successful_payment.total_amount // 100}"
#             f" {message.successful_payment.currency} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!!!",
#             reply_markup=btns.check_pay_kb())
#
#         database.set_sub_end(user_id)
#         database.add_payment_amount(amount_sub, user_id, True)
#
#
# @dp.callback_query_handler(lambda query: True)
# async def some(call: types.CallbackQuery):
#     user_id = call.from_user.id
#     photo_path = 'List_of_courses/course_photo1.jpg'
#
#     if call.data == "info":
#         await bot.send_message(call.from_user.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ")
#
#
#     elif call.data == "start":
#         status = 1
#         database.set_status(user_id, status)
#
#         await bot.delete_message(call.message.chat.id, call.message.message_id)
#         await bot.send_photo(photo=open(photo_path, 'rb'), chat_id=user_id, caption=welcome_msg, reply_markup=btns.ReplyKeyboardRemove())
#
#         time.sleep(3)
#
#         await bot.send_message(call.from_user.id, "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞", reply_markup=course.info_course())
#
#
#     elif call.data == "next":
#
#         await bot.delete_message(call.message.chat.id, call.message.message_id)
#         await bot.send_message(call.from_user.id, "–ü–µ—Ä–≤–∞—è –∑–∞–¥–∞–Ω–∏–µ", reply_markup=course.start_course())
#
#         # database.update_status(user_id)  # –î–æ–±–∞–≤–ª–µ–Ω–∏—è –∫ —Å—Ç–∞—Ç—É—Å—É +1
#
#
#
#
#
#
# if __name__ == "__main__":
#     executor.start_polling(dp, skip_updates=False)
